---
title: "`ggplot2` in `R`"
description: "Slides modified from Roy Francis (RaukR)"
author: "Abu Bakar Siddique, SLUBI"
date: "2025-04-07"
format: 
 revealjs:
   slide-number: c/t
   logo: assets/logo.png
   width: 1600
   height: 900
   theme: simple

---

## Packages {visibility="hidden"}

```{r}
#| echo: FALSE

library(dplyr) # data wrangling
library(tidyr) # tidy thre data 
library(ggplot2) # grammer of graphics
library(palmerpenguins) # Penguins data
library(kableExtra) # for table
library(patchwork) # multiple plot alignment
library(plotly) # interactive plot
library(ggiraph) # interactive plot
```

## Graphs

- `Essential` part of data analyses 

. . . 

- Data with `same summary statistics` can look very `different when plotted` out.

::: columns
::: {.column width="40%"}
![](assets/anscombe.jpg)
:::

::: {.column width="50%"}
![](assets/datasaurus.jpg)
:::
:::   
[Anscombe's quartet](https://en.wikipedia.org/wiki/Anscombe%27s_quartet), [Datasaurus](https://cran.r-project.org/web/packages/datasauRus/vignettes/Datasaurus.html)



::: notes
Summary statistics do not always reflect how the data looks like.

> Anscombe's quartet comprises four data sets that have nearly identical simple descriptive statistics, yet have very different distributions and appear very different when graphed.

A more modern example dataset is datasaurus dozen. A set of 13 xy datasets that have nearly identical summary statistics but look very different when plotted out. One of the plots is in fact a dinosaur.
:::

## Base Graphics vs ggplot2

::: columns
::: {.column width="50%"}
```{r}
#| eval: true 
#| echo: true
#| fig-height: 4.5
#| fig-width: 4
hist(penguins$flipper_length_mm)
```
:::

::: {.column width="50%"}
```{r}
#| eval: false 
#| echo: false
library(ggplot2)
```

```{r}
#| eval: true 
#| echo: true
#| fig-height: 4
#| fig-width: 4
ggplot(penguins,aes(flipper_length_mm))+
  geom_histogram(bins = 13)
```
:::
:::

::: notes
For simple graphs, the base plot seems to take minimal coding effort compared to a ggplot graph.
:::

## Base Graphics vs ggplot2

::: columns
::: {.column width="50%"}
::: {style="background-color:#d0ece7"}
basic r plot
:::

```{r}
#| code-line-numbers: "none"
#| eval: true 
#| echo: true
#| fig-height: 4
#| fig-width: 5

plot(penguins$flipper_length_mm,penguins$body_mass_g,
     col=c("red","green","blue")[penguins$species],
     pch=c(0,1,2)[penguins$species])
legend(x=172,y=6300,
       legend=c("Adelie","Chinstrap","Gentoo"),
       pch=c(0,1,2),col=c("red","green","blue"))
```
:::

::: {.column width="50%"}
::: {style="background-color:#d0ece7"}
ggplot
:::

```{r}
#| eval: true 
#| echo: true
#| fig-height: 4
#| fig-width: 6

ggplot(penguins, aes(flipper_length_mm,body_mass_g, 
  color=species)) +
  geom_point()
```
:::
:::

::: notes
For anything beyond extremely basic plots, base plotting quickly become complex. More importantly, base plots do not have consistency in it's functions or plotting strategy.
:::

## Why `ggplot2`?
::: columns
::: 
-   Consistent code
-   Flexible (Add/remove components)
-   Automatic legends, colors etc
-   Save plot objects
-   Themes for reusing styles
-   Numerous add-ons/extensions
-   Nearly complete structured graphing solution
-   Adapted to other programming languages
    -   [Gadfly](http://gadflyjl.org/stable/) in Julia, [gramm](https://se.mathworks.com/matlabcentral/fileexchange/54465-gramm-complete-data-visualization-toolbox-ggplot2-r-like) in MatLab, [GGPlot](https://metacpan.org/pod/Chart::GGPlot) in Perl, [Vega](https://vega.github.io/vega/) in Javascript,   [PlotNine](https://plotnine.readthedocs.io/en/stable/), 
[ggpy](https://github.com/yhat/ggpy), [lets-plot](https://lets-plot.org/) in Python. 


::: notes
`ggplot2` has a consistent logic and more structured code for plotting. There is bit of a learning curve, but once the code syntax and the logic is clear, it becomes easy to plot a huge variety of graphs.
:::

## Grammar Of Graphics

::: columns
::: {.column width="25%"}
![](assets/gogv1.png)\
![](assets/gog.jpg)
:::

::: {.column width="75%" .incremental}
-   Leland Wilkinson's **The Grammar of Graphics**
-   Created by Hadley Wickham in 2005
-   **Data**: Input data. `Table, csv, xlsx`
-   **Aesthetic**: Mapping or visual characteristics of the geometry. `Size, Color, Shape` etc
-   **Geometries**: A geometry representing data. `Points, Lines` etc
-   **Facets**: Split plot into `subplot`
-   **Statistics**: Statistical transformations. `Counts, Means` etc
-   **Coordinates**: Numeric system to determine position of geometry. `Cartesian, Polar` etc
-   **Scale**: How visual characteristics are converted to display values
-   **Theme**: controls points of display. `Font size, background colour`
:::
:::

::: notes
Traditional graphing tools generally have independent set of rules for different kinds of graphs and also labelled differently such as barplots, scatterplots, boxplots etc. Each graph has it's own function and plotting strategy.

Leland Wilkinson's **The Grammar of Graphics** introduces this idea that any kind of graph can be created by following a set of rules and put forward a framework that enables this.

Grammar of graphics (GOG) tries to unify all graphs under a common umbrella. GOG brings the idea that graphs are made up of discrete elements (data, aesthetics, geometry, statistics, coordinates, facets, themes etc) which can be mixed and matched to create any plot. This creates a consistent underlying framework to graphing.

`ggplot` (Grammar of graphics) was built in R by Hadley Wickham in 2005 as an implementation of Leland Wilkinson's book Grammar of Graphics.
:::

## Building A Graph: • `Syntax`

::: columns
::: {.column width="25%"}
![](assets/gogv1.png)
:::

::: {.column width="75%"}
![](assets/syntax.png){width="100%"}
:::
:::


## Building A Graph

```{r}
#| code-line-numbers: "1-4"
#| eval: false 
#| echo: true
require(ggplot2)        # load ggplot2
require(palmerpenguins) # load penguins data pack

data("penguins")        # load penguins data 
```


::: columns
::: {.column width="40%"}

![](https://ggplot2.tidyverse.org/logo.png)

![](https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png)



:::
:::

## Building A Graph

::: columns
::: {.column width="50%"}
```{r,bag-1}
#| code-line-numbers: "1"
#| eval: false 
#| echo: true
#| fig-show: hide
ggplot(data = penguins)
```
:::

::: {.column width="50%"}
```{r,bag-1}
#| echo: false
#| fig-height: 5
#| fig-width: 5
```
:::
:::

## Building A Graph

::: columns
::: {.column width="50%"}
```{r,bag-2}
#| code-line-numbers: "1-3"
#| eval: false
#| echo: true
#| fig-show: hide
ggplot(data = penguins,
mapping = aes(x = flipper_length_mm, 
              y = body_mass_g))
```
:::

::: {.column width="50%"}
```{r,bag-2}
#| echo: false
#| fig-height: 5
#| fig-width: 5
```
:::
:::

## Building A Graph

::: columns
::: {.column width="50%"}
```{r,bag-3}
#| code-line-numbers: "1-4"
#| eval: true 
#| echo: true
#| fig-show: hide
ggplot(data = penguins,
mapping = aes(x = flipper_length_mm, 
              y = body_mass_g)) + 
geom_point()
```
:::

::: {.column width="50%"}
```{r,bag-3}
#| echo: false
#| fig-height: 5
#| fig-width: 5
```
:::
:::

## Building A Graph

::: columns
::: {.column width="50%"}
```{r,bag-4}
#| code-line-numbers: "1-5"
#| eval: false
#| echo: true
#| fig-show: hide
ggplot(data = penguins,
mapping = aes(x = flipper_length_mm, 
              y = body_mass_g, 
              colour = species)) +
geom_point()
```
:::

::: {.column width="50%"}
```{r,bag-4}
#| echo: false
#| fig-height: 5
#| fig-width: 6
```
:::
:::

## Building A Graph

::: columns
::: {.column width="50%"}
```{r,bag-5}
#| code-line-numbers: "1-5"
#| eval: false
#| echo: true
#| fig-show: hide
ggplot(data = penguins,
mapping = aes(x = flipper_length_mm, 
              y = body_mass_g, 
              colour = species)) +
geom_point()
```
 *Or*

```{r,bag-5.1}
#| code-line-numbers: "1-4"
#| eval: false
#| echo: true
#| fig-show: hide
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, 
                         y = body_mass_g, 
                         colour = species))
```
:::

::: {.column width="50%"}
```{r,bag-5}
#| echo: false
#| fig-height: 5
#| fig-width: 6
```
:::
:::

## Building A Graph

::: columns
::: {.column width="50%"}
```{r,bag-6}
#| code-line-numbers: "1-5"
#| eval: false
#| echo: true
#| fig-show: hide
ggplot(data = penguins,
mapping = aes(x = flipper_length_mm, 
              y = body_mass_g, 
              colour = species)) +
geom_point()
```
 *Or*

```{r,bag-6.1}
#| code-line-numbers: "1-4"
#| eval: false
#| echo: true
#| fig-show: hide
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, 
                         y = body_mass_g, 
                         colour = species))
```
:::

::: {.column width="50%"}
```{r,bag-6}
#| echo: false
#| fig-height: 5
#| fig-width: 6
```
:::

::: {.column width="40%"}

![](assets/syntax.png)

:::
:::

## Data • `penguins`

-   Input data is always an R `data.frame` object

```{r,echo=FALSE}
penguins %>%
  head(n=3) %>%
  kable("html",escape=F,align="c")
```

```{r, echo=TRUE}
str(penguins)
```

::: notes
It's a good idea to use `str()` to check the input dataframe to make sure that numbers are actually numbers and not characters, for example. Verify that factors are correctly assigned.
:::

## Data • `diamonds`

```{r}
#| echo: false
head(diamonds) %>% na.omit() %>%
  kable("html",escape=F,align="c") %>%
  kable_styling(bootstrap_options=c("striped","hover","responsive","condensed"),
              position="left",full_width = F)
```

```{r}
str(diamonds)
```

::: notes
R `data.frame` is a tabular format with rows and columns just like a spreadsheet.
:::

## Data • `format`

-   Transforming data into 'long' or 'wide' formats

::: columns
::: {.column width="40%"}
![](assets/tidy.png){width="100%"}
:::

::: {.column width="70%"}
*Wide*

```{r,comment=""}
#| echo: true
head(penguins, n=4)
```

*Long*

```{r,comment=""}
#| echo: false
penguins %>% tidyr::pivot_longer(
  col=c(bill_length_mm,bill_depth_mm,flipper_length_mm,body_mass_g), 
  names_to= "variables", values_to="value",values_drop_na = TRUE) %>%
  as.data.frame() %>% head(n=4)
```
:::
:::

::: notes
The data must be cleaned up and prepared for plotting. The data must be 'tidy'. Columns must be variables and rows must be observations. The data can then be in wide or long format depending on the variables to be plotted.
:::

## Geoms • `types`

![](assets/geoms.png)

. . .

::: columns
::: {.column width=50%}
```{r, geom-1}
#| eval: false
#| echo: true
#| fig-height: 1
#| fig-width: 1
#| include: true
p <- ggplot(data = penguins)

# scatterplot
p + geom_point(aes(x=flipper_length_mm,y=body_mass_g))

# barplot
p + geom_bar(aes(x=species))

# boxplot
p + geom_boxplot(aes(x=species,y=body_mass_g))

# search
help.search("^geom_",package="ggplot2")
```
:::

:::{.column width=50%}
```{r, geom-2}
#| echo: false
#| fig-height: 5
#| fig-width: 4
# scatterplot
p <- ggplot(penguins)

# scatterplot
scatterplot <- p + geom_point(aes(x=flipper_length_mm,y=body_mass_g))

# barplot
barplot <- p + geom_bar(aes(x=flipper_length_mm))

# boxplot
boxplot <- p + geom_boxplot(aes(x=species,y=body_mass_g))

wrap_plots(scatterplot, barplot, boxplot, ncol = 1)
```
:::
:::

::: notes
Geoms are the geometric components of a graph such as points, lines etc used to represent data. The same data can be visually represented in different geoms. For example, points or bars. Mandatory input requirements change depending on geoms.
:::

## Stats
-   `Stats` compute new variables from input data.
-   `Geoms` have default stats.
-   Plots can be built with stats.

. . .

::: columns
::: {.column width="50%"}

```{r}
#| fig-height: 3
#| fig-width: 8
#| echo: true
x <- ggplot(data = penguins) + 
  geom_bar(aes(x=flipper_length_mm),stat="bin")

y <- ggplot(data = penguins) + 
  geom_bar(aes(x=species),stat="count")

wrap_plots(x,y,nrow=1)
```
:::

::: {.column width="50%"}

```{r}
#| fig-height: 3
#| fig-width: 8
#| echo: true
x <- ggplot(data = penguins) + 
  stat_bin(aes(x=flipper_length_mm),geom="bar")

y <- ggplot(data = penguins) + 
  stat_count(aes(x=species),geom="bar")

wrap_plots(x,y,nrow=1)
```
:::
:::

::: notes
-   Normally the data is plotted directly from input as it is.
-   Some plots require the data to be computed or transformed. Eg. boxplot, histograms, smoothing, predictions, regression etc.
:::

## Stats

-   Stats have default geoms.

```{r}
#| echo: false
data.frame("plot"=c("histogram","smooth","boxplot","density","freqpoly"),
           "stat"=c("bin","smooth","boxplot","density","freqpoly"),
           "geom"=c("bar","line","boxplot","line","line")) %>%
  kable(format="html",escape=F,align="l") %>%
  kable_styling(bootstrap_options=c("striped","hover","responsive","condensed"),
              position="left",full_width = F)
```

```{r}
#| echo: false
#| eval: false
stat_bin()
stat_count()
stat_density()
stat_bin_2d()
stat_bin_hex()
stat_contour()
stat_boxplot()
stat_smooth()
stat_quantile()
```

Use `args(geom_bar)` to check arguments.

## Position
```{r}
#| echo: true
p <- ggplot(penguins,aes(x=year,y=body_mass_g,fill=species))
```

::: columns
::: {.column width="33%"}
```{r}
#| fig-height: 4
#| fig-width: 5
#| echo: true
p + geom_bar(stat="identity",
             position="stack")
```
:::

::: {.column width="33%"}
```{r}
#| fig-height: 4
#| fig-width: 5
#| echo: true
p + geom_bar(stat="identity",
             position="dodge")
```
:::
::: {.column width="33%"}
```{r}
#| fig-height: 4
#| fig-width: 5
#| echo: true
p + geom_bar(stat="identity",
             position="fill")
```
:::
:::


## Aesthetics

::: columns
::: {.column width="50%"}
-   Aesthetic `mapping`

```{r}
#| fig-height: 4
#| fig-width: 5.5
#| echo: true
ggplot(data = penguins)+
  geom_point(aes(x=flipper_length_mm,
                 y=body_mass_g,
                 size=bill_length_mm,
                 alpha=bill_depth_mm,
                 shape=species,
                 color=species))
```
:::

::: {.column width="50%"}
-   Aesthetic `parameter`

```{r}
#| fig-height: 4
#| fig-width: 5
#| echo: true
ggplot(data = penguins)+
  geom_point(aes(x=flipper_length_mm,
                 y=body_mass_g),
                 size=2,
                 alpha=0.8,
                 shape=15,
                 color="steelblue")
```
:::
:::

::: notes
Aesthetics are used to assign values to geometries. For example, a set of points can be a fixed size or can be different colors or sizes denoting a variable.

This would be an incorrect way to do it.

```         
ggplot(penguins)+
geom_point(aes(x=flipper_length_mm,y=body_mass_g,size=2)
```
:::


## Aesthetics

```{r warning=FALSE}
#| fig-height: 5
#| fig-width: 10
#| echo: true

x1 <- ggplot(penguins) +
  geom_point(aes(x=flipper_length_mm,  y=body_mass_g))+
  stat_smooth(aes(x=flipper_length_mm, y=body_mass_g))

x2 <- ggplot(penguins, aes(x=flipper_length_mm, y=body_mass_g))+
  geom_point() + 
  geom_smooth()

wrap_plots(x1,x2,nrow=1,ncol=2)
```

::: notes
If the same aesthetics are used in multiple geoms, they can be moved to `ggplot()`.
:::

## Multiple Geoms

```{r}
#| eval: true
#| echo: true
#| fig-height: 6
#| fig-width: 12
p <- ggplot(penguins,aes(x=flipper_length_mm,y=body_mass_g))+
      geom_point()






p
```

::: notes
Multiple geoms can be plotted one after the other. The order in which items are specified in the command dictates the plotting order on the actual plot.
:::

## Multiple Geoms

```{r}
#| eval: true
#| echo: true
#| fig-height: 6
#| fig-width: 12
p <- ggplot(penguins,aes(x=flipper_length_mm,y=body_mass_g))+
      geom_point()+
      geom_line()





p
```

::: notes
Multiple geoms can be plotted one after the other. The order in which items are specified in the command dictates the plotting order on the actual plot.
:::

## Multiple Geoms

```{r}
#| eval: true
#| echo: true
#| fig-height: 6
#| fig-width: 12
p <- ggplot(penguins,aes(x=flipper_length_mm,y=body_mass_g))+
      geom_point()+
      geom_line()+
      geom_smooth()




p
```

::: notes
Multiple geoms can be plotted one after the other. The order in which items are specified in the command dictates the plotting order on the actual plot.
:::

## Multiple Geoms

```{r}
#| eval: true
#| echo: true
#| fig-height: 6
#| fig-width: 12
p <- ggplot(penguins,aes(x=flipper_length_mm,y=body_mass_g))+
      geom_point()+
      geom_line()+
      geom_smooth()+
      geom_rug()



p
```

::: notes
Multiple geoms can be plotted one after the other. The order in which items are specified in the command dictates the plotting order on the actual plot.
:::

## Multiple Geoms

```{r}
#| eval: true
#| echo: true
#| fig-height: 6
#| fig-width: 12
p <- ggplot(penguins,aes(x=flipper_length_mm,y=body_mass_g))+
      geom_point()+
      geom_line()+
      geom_smooth()+
      geom_rug()+
      geom_step()


p
```

::: notes
Multiple geoms can be plotted one after the other. The order in which items are specified in the command dictates the plotting order on the actual plot.
:::

## Multiple Geoms

```{r}
#| eval: true
#| echo: true
#| fig-height: 6
#| fig-width: 12
p <- ggplot(penguins,aes(x=flipper_length_mm,y=body_mass_g))+
      geom_point()+
      geom_line()+
      geom_smooth()+
      geom_rug()+
      geom_step()+
      geom_text(data=subset(penguins,penguins$species=="Adelie"),
                aes(label=species))
p
```

::: notes
Multiple geoms can be plotted one after the other. The order in which items are specified in the command dictates the plotting order on the actual plot.

In this case, the points appear over the lines.

```         
ggplot(penguins,aes(x=flipper_length_mm,y=body_mass_g))+
      geom_point()+
      geom_line()+
```

while here the lines appear above the points.

```         
ggplot(penguins,aes(x=flipper_length_mm,y=body_mass_g))+
      geom_line()+
      geom_point()+
```

Each geom takes input from `ggplot()` inputs. If extra input is required to a geom, it can be specified additionally inside `aes()`.

`data` can be changed if needed for specific geoms.
:::

## 

Just because you can doesn't mean you should!

![](assets/complicated-graphs.jpg)


## Facets • `facet_wrap`

-   `Split to subplots` based on variable(s), 
-   Faceting in `one dimension`

. . .

::: columns
::: {.column width="50%"}
```{r}
#| fig-height: 4
#| fig-width: 5
#| echo: true
p <- ggplot(penguins)+
      geom_point(aes(x=flipper_length_mm,
                     y=body_mass_g,
                     color=species))
p
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 2
#| fig-width: 8
#| echo: true
p + facet_wrap(~species)
```

```{r}
#| fig-height: 3.5
#| fig-width: 3.5
#| echo: true
p + facet_wrap(~species,nrow=3)
```
:::
:::

::: notes
`facet_wrap` is used to split a plot into subplots based on the categories in one or more variables.
:::


## Facets • `facet_grid`

-   Faceting in `two dimensions`

. . .

::: columns
::: {.column width="50%"}
```{r}
#| fig-height: 3
#| fig-width: 7
#| echo: true
p <- ggplot(data = penguins, aes(x=flipper_length_mm,
                                 y=body_mass_g))+
                                 geom_point()
p + facet_grid(~island+year)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 4
#| fig-width: 5
#| echo: true
p + facet_grid(island~year)
```
:::
:::

::: notes
`facet_grid` is also used to split a plot into subplots based on the categories in one or more variables. `facet_grid` can be used to create a matrix-like grid of two variables.
:::
## Coordinate Systems
![](assets/coordinate.png)

-   `coord_cartesian(xlim=c(2,8))` for zooming in
-   `coord_map` for controlling limits on maps
-   `coord_polar` for polar cordinates

. . . 

::: columns
::: {.column width="50%"}

```{r}
#| fig-height: 4
#| fig-width: 5
#| echo: true
p <- ggplot(penguins,aes(x="",y=bill_length_mm,
            fill=species))+
  geom_bar(stat="identity")
p
```
:::

::: {.column width="50%"}

```{r}
#| code-line-numbers: "1"
#| fig-height: 3.8
#| fig-width: 5
#| echo: true
p + coord_polar("y", start = 0)
```
:::
:::

::: notes
The coordinate system defines the surface used to represent numbers. Most plots use the cartesian coordinate sytem. Pie charts for example, is a polar coordinate projection of a cartesian barplot. Maps for example can have numerous coordinate systems called map projections. For example; UTM coordinates.
:::

## Theming
-   Modify non-data plot elements/appearance
-   Axis labels, panel colors, legend appearance etc
-   Save a particular appearance for reuse
-   `?theme`

. . . 

::: columns
::: {.column width="50%"}
```{r}
#| code-line-numbers: "1-4"
#| fig-height: 4
#| fig-width: 5
#| echo: true
ggplot(penguins, aes(x=bill_length_mm)) +
    geom_histogram() +
    facet_wrap(~species, ncol = 1) +
    theme_grey()
```
:::

::: {.column width="50%"}

```{r}
#| code-line-numbers: "1-4"
#| fig-height: 4
#| fig-width: 5
#| echo: true
ggplot(penguins, aes(x=bill_length_mm)) +
    geom_histogram() +
    facet_wrap(~species, ncol = 1) +
    theme_bw()
```
:::
:::

::: notes
Themes allow to modify all non-data related components of the plot. This is the visual appearance of the plot. Examples include the axes line thickness, the background color or font family.
:::

## Theme • Legend

```{r}
#| code-line-numbers: "1-4"
#| fig-height: 4.5
#| fig-width: 5.5
#| echo: true
p <- ggplot(penguins)+
      geom_point(aes(x=flipper_length_mm, 
                     y=body_mass_g, 
                     color=species))
```

::: columns
::: {.column width="50%"}
::: {style="background-color:#d0ece7"}
at top
:::
```{r}
#| code-line-numbers: "1"
#| fig-height: 4
#| fig-width: 4
#| echo: true
p + theme(legend.position="top")
```
:::

::: {.column width="50%"}
::: {style="background-color:#d0ece7"}
at bottom
:::
```{r}
#| code-line-numbers: "1"
#| fig-height: 4
#| fig-width: 4
#| echo: true
p + theme(legend.position="bottom")
```
:::
:::

## Theme • `Text`

```{r}
#| eval: false
#| echo: false
element_text(family=NULL,face=NULL,color=NULL,size=NULL,hjust=NULL,
             vjust=NULL, angle=NULL,lineheight=NULL,margin = NULL)
```
::: columns
::: {.column-width="33%"}
```{r}
#| echo: true
p <- ggplot(penguins, 
            aes(x = flipper_length_mm,
                y = body_mass_g, 
                alpha = bill_length_mm,
                shape = island)) + 
            geom_point() +  
            facet_grid(island~year) + 
            labs(title="Title", 
            subtitle="subtitle")
p
```
:::
:::


## Theme • `Text`

```{r}
#| eval: false
#| echo: false
element_text(family=NULL,face=NULL,color=NULL,size=NULL,hjust=NULL,
             vjust=NULL, angle=NULL,lineheight=NULL,margin = NULL)
```

```{r}
#| echo: false
p <- ggplot(penguins, 
            aes(x = flipper_length_mm,
                y = body_mass_g, 
                alpha = bill_length_mm,
                shape = island)) + 
            geom_point() +  
            facet_grid(island~year) + 
            labs(title="Title", 
            subtitle="subtitle")

```

```{r}
#| echo: true
p <- p + theme(
    axis.title=element_text(color="#e41a1c"),
    axis.text=element_text(color="#377eb8"),
    plot.title=element_text(color="#4daf4a"),
    plot.subtitle=element_text(color="#984ea3"),
    legend.text=element_text(color="#ff7f00"),
    legend.title=element_text(color="#ffff33"),
    strip.text=element_text(color="#a65628")
)
```

```{r}
#| fig-height: 4.6
#| fig-width: 9
#| echo: false
dfr <- data.frame(value=rep(1,7),label=c("axis.title","axis.text","plot.title","plot.subtitle","legend.text","legend.title","strip.text"),stringsAsFactors=FALSE) %>%
  mutate(label=factor(label,levels=c("axis.title","axis.text","plot.title","plot.subtitle","legend.text","legend.title","strip.text")))

q <- ggplot(dfr,aes(x=label,y=value,fill=label))+
  geom_bar(stat="identity")+
  labs(x="",y="")+
  coord_flip()+
  scale_fill_manual(values=c("#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628"))+
  theme_minimal(base_size=20)+
  theme(
    legend.position="none",
    axis.text.x=element_blank(),
    axis.ticks=element_blank(),
    panel.grid=element_blank())

wrap_plots(p,q,nrow=1,widths=c(3,1))
```

## Theme • Rect

```{r}
#|echo: false
element_rect(fill=NULL,color=NULL,size=NULL,linetype=NULL)
```

```{r, include=FALSE}
#| echo: false
p <- ggplot(penguins, 
            aes(x = flipper_length_mm,
                y = body_mass_g, 
                alpha = bill_length_mm,
                shape = island)) + 
            geom_point() +  
            facet_grid(island~year) + 
            labs(title="Title", 
            subtitle="subtitle")

```

```{r}
#| echo: true
p <- p + theme(
    plot.background=element_rect(fill="#b3e2cd"),
    panel.background=element_rect(fill="#fdcdac"),
    panel.border=element_rect(fill=NA,color="#cbd5e8",size=3),
    legend.background=element_rect(fill="#f4cae4"),
    legend.box.background=element_rect(fill="#e6f5c9"),
    strip.background=element_rect(fill="#fff2ae")
)
  

```

```{r}
#| fig-height: 4.8
#| fig-width: 9
#| echo: false
dfr <- data.frame(value=rep(1,6),label=c("plot.background","panel.background","panel.border","legend.background","legend.box.background","strip.background"),stringsAsFactors=FALSE) %>%
  mutate(label=factor(label,levels=c("plot.background","panel.background","panel.border","legend.background","legend.box.background","strip.background")))

q <- ggplot(dfr,aes(x=label,y=value,fill=label))+
  geom_bar(stat="identity")+
  labs(x="",y="")+
  coord_flip()+
  scale_fill_manual(values=c("#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae"))+
  theme_minimal(base_size=20)+
  theme(
    legend.position="none",
    axis.text.x=element_blank(),
    axis.ticks=element_blank(),
    panel.grid=element_blank())

wrap_plots(p,q,nrow=1,widths=c(3,1))
```

## Theme • Reuse

```{r}
#| echo: false
p <- ggplot(penguins, 
            aes(x = flipper_length_mm,
                y = body_mass_g , color = species)) +
            geom_point()
```

::: columns
::: {.column width="100%"}
```{r}
#| echo: true
newtheme <- theme_bw() + theme(
  axis.ticks=element_blank(), panel.background=element_rect(fill="white"),
  panel.grid.minor=element_blank(), panel.grid.major.x=element_blank(),
  panel.grid.major.y=element_line(size=0.3,color="grey90"), panel.border=element_blank(),
  legend.position="top", legend.justification="right"
)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 3.4
#| fig-width: 5
#| echo: true
p
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 3.5
#| fig-width: 4.5
#| echo: true
p + newtheme
```
:::
:::

## Professional themes

![](assets/bbc.png){width="95%"}

::: smaller
[How BBC works with R graphics](https://medium.com/bbc-visual-and-data-journalism/how-the-bbc-visual-and-data-journalism-team-works-with-graphics-in-r-ed0b35693535)
:::


## Saving plots

```{r,s-1}
#| echo: true
#| fig-show: hide
p <- ggplot(penguins,aes(x=bill_length_mm,y=flipper_length_mm,color=species)) + 
  geom_point()
p
```
::: columns
::: {.column width="50%"}
```{r,s-1}
#| echo: false
#| fig-height: 3
#| fig-width: 6
```
:::
:::

. . . 

-   `ggplot2` package offers a convenient function

```{r}
#| eval: false
#| echo: true
ggsave("plot.png",p,height=5,width=7,units="cm",dpi=200)
# Note that default units in png is pixels while in ggsave it’s inches
```

. . . 

-   `ggplot2` plots can be saved just like base plots

```{r}
#| eval: false
#| echo: true
png("plot.png",height=5,width=7,units="cm",res=200)
print(p)
dev.off()
```
## Combining Plots

```{r}
#| echo: true
p <- ggplot(penguins, aes(x=flipper_length_mm, y=body_mass_g,color=species)) + geom_point()
q <- ggplot(penguins, aes(x=year, y=body_mass_g, fill=species)) + geom_bar(stat="identity")
```
. . . 

```{r}
#| code-line-numbers: "1"
#| fig-height: 4
#| fig-width: 10
#| echo: true
patchwork::wrap_plots(p,q)
```

::: notes
Combining two or more `ggplot2` plots is often required and several packages exist to help with this situation. Some functions allow plots to be placed adjacently, also allowing varying heights or widths of each plot. Some functions allow one plot to be plotted on another plot like a subset plot. Here are alternative options.
:::

## Combining Plots

```{r}
#| echo: true
p <- ggplot(penguins, aes(x=flipper_length_mm, y=body_mass_g,color=species)) + geom_point()
q <- ggplot(penguins, aes(x=year, y=body_mass_g, fill=species)) + geom_bar(stat="identity")
```

```{r}
#| code-line-numbers: "1-2"
#| fig-height: 3
#| fig-width: 8
#| echo: true
patchwork::wrap_plots(p,q) + 
  plot_annotation(tag_levels = 'a')
```
[patchwork](https://patchwork.data-imaginist.com/) documentation.

::: notes
Combining two or more `ggplot2` plots is often required and several packages exist to help with this situation. Some functions allow plots to be placed adjacently, also allowing varying heights or widths of each plot. Some functions allow one plot to be plotted on another plot like a subset plot. Here are alternative options.

```{r}
#| eval: false
#| echo: true
gridExtra::grid.arrange(p,q,ncol=2)
ggpubr::ggarrange(p,q,ncol=2,
  widths=c(1.5,1),common.legend=T)
cowplot::plot_grid()
```
:::


## Extensions

-   [**patchwork**](https://patchwork.data-imaginist.com/): Combining plots
-   [**ggrepel**](https://ggrepel.slowkow.com/index.html): Text labels including overlap control
-   [**ggforce**](https://ggforce.data-imaginist.com/): Circles, splines, hulls, voronoi etc
-   [**ggpmisc**](https://github.com/aphalo/ggpmisc): Miscellaneaous features
-   [**ggthemes**](https://jrnold.github.io/ggthemes/): Set of extra themes\
-   [**ggthemr**](https://github.com/cttobin/ggthemr): More themes\
-   [**ggsci**](https://nanx.me/ggsci/): Color palettes for scales\
-   [**ggmap**](https://github.com/dkahle/ggmap): Dedicated to mapping\
-   [**ggraph**](https://ggraph.data-imaginist.com/): Network graphs\
-   [**ggiraph**](http://davidgohel.github.io/ggiraph/): Converting ggplot2 to interactive graphics

A collection of ggplot extension packages: <https://exts.ggplot2.tidyverse.org/>.\
Curated list of ggplot2 links: <https://github.com/erikgahner/awesome-ggplot2>.


## Packages {visibility="hidden"}

```{r}
#| echo: FALSE

library(dplyr) # data wrangling
library(tidyr) # tidy thre data 
library(ggplot2) # grammer of graphics
library(palmerpenguins) # Penguins data
library(kableExtra) # for table
library(patchwork) # multiple plot alignment
library(plotly) # interactive plot
library(ggiraph) # interactive plot
```


## Scales • `Discrete Colors`

-   scales: position, color, fill, size, shape, alpha, linetype
-   syntax: `scale_<aesthetic>_<type>`

::: columns
::: {.column width="50%"}
```{r}
#| fig-height: 4
#| fig-width: 5
#| echo: true

p <- ggplot(iris)+geom_point(aes(x=Sepal.Length,
                     y=Sepal.Width,color=Species))
p
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 4
#| fig-width: 5
#| echo: true
p + scale_color_manual(
     name="Manual",
     values=c("#5BC0EB","#FDE74C","#9BC53D"))
```
:::
:::

::: notes
Scales are used to control the aesthetics. For example the aesthetic color is mapped to a variable `x`. The palette of colors used, the mapping of which color to which value, the upper and lower limit of the data and colors etc is controlled by scales.

![](assets/scales.png){width="50%"}
:::

## Scales • `Continuous Colors`

-   In RStudio, type `scale_`, then press **TAB**

. . .

::: columns
::: {.column width="50%"}
```{r}
#| fig-height: 4
#| fig-width: 5.5
#| echo: true
p <- ggplot(iris)+
      geom_point(aes(x=Sepal.Length,
                     y=Sepal.Width,
      shape=Species,color=Petal.Length))
p
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 4
#| fig-width: 5.5
#| echo: true
p +
scale_color_gradient(name="Pet Len",
  breaks=range(iris$Petal.Length),
  labels=c("Min","Max"),
  low="black",high="red")

```
:::
:::

::: notes
Continuous colours can be changed using `scale_color_gradient()` for two colour gradient. Any number of breaks and colours can be specified using `scale_color_gradientn()`.
:::

## Scales • `Shape`

::: columns
::: {.column width="50%"}
```{r}
#| fig-height: 4
#| fig-width: 5.5
#| echo: true
p <- ggplot(iris)+
      geom_point(aes(x=Sepal.Length,
                     y=Sepal.Width,
      shape=Species,color=Species))
p
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 4
#| fig-width: 5.5
#| echo: true
p +
scale_color_manual(name="New",
   values=c("blue","green","red"))+
scale_shape_manual(name="Bla",values=c(0,1,2))

```
:::
:::

::: notes
Shape scale can be adjusted using `scale_shape_manual()`. Multiple mappings for the same variable groups legends.
:::

## Scales • `Axes`

-   scales: x, y
-   syntax: `scale_<axis>_<type>`
-   arguments: name, limits, breaks, labels

. . .

::: columns
::: {.column width="50%"}
```{r}
#| fig-height: 4
#| fig-width: 5
#| echo: true
p <- ggplot(iris)+geom_point(
  aes(x=Sepal.Length,y=Sepal.Width))
p
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 4
#| fig-width: 5
#| echo: true
p + scale_x_continuous(name="Sepal Length",
        breaks=seq(1,8),limits=c(3,5))
```
:::
:::

::: notes
The x and y axes are also controlled by scales. The axis break points, the break point text and limits are controlled through scales.

When setting limits using `scale_`, the data outside the limits are dropped. Limits can also be set using `lims(x=c(3,5))` or `xlim(c(3,5))`. When mapping, `coord_map()` or `coord_cartesian()` is recommended for setting limits.
:::




## Help

::: columns
::: {.column width="30%"}
-   [**ggplot2 book**](https://ggplot2-book.org/)\
    ![](https://ggplot2-book.org/cover.jpg){height="200px"}\
-   [**The R cookbook**](https://r-graphics.org/)\
    ![](https://r-graphics.org/cover.jpg){height="200px"}
:::

::: {.column width="70%"}
-   [**ggplot2 official reference**](http://ggplot2.tidyverse.org/reference/)\
-   [**RStudio cheatsheet**](https://www.rstudio.com/resources/cheatsheets/)\
-   [**r-statistics ggplot2 cheatsheet**](http://r-statistics.co/ggplot2-cheatsheet.html)\
-   [**StackOverflow**](https://stackoverflow.com/)\
-   Blogs, [R-Bloggers](https://www.r-bloggers.com/), [Cedric Scherer](https://www.cedricscherer.com/tags/ggplot2/) etc.
:::
:::


##  {background-image="../../assets/images/cover.jpg"}

### Thank you! Questions?
::: columns
::: {.column width="70%"}
![](assets/ggplot2_masterpiece_v1.png)
:::
:::

Acknowledgements:

[ • [SLUBI](https://www.slubi.se/) • [3Bs](https://www.slubi.se/3BS.html/) • Slides adapted from [RaukR](https://nbisweden.github.io/workshop-RaukR-2306/)]{.smaller} • [GPL-3 License](https://choosealicense.com/licenses/gpl-3.0/)
